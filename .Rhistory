set.seed(3060)
# Sets the location variables and the working directory
training_set.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/training_dataset"
test_set.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/test_dataset"
section_code.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/section2_code"
## Imports Traing Set
setwd(training_set.location)
# Finds all the CSV files in that path with the suffix features.csv
training_set.files <- list.files(pattern="*features.csv")
# Goes through the list of files and imports the data into training_set.data
training_set.data <- list()
for (i in 1:length(training_set.files)) {
training_set.data[[i]] <- read.csv(training_set.files[i], header=FALSE, sep=",")
}
# Calls RBind on training_set.data and creates one dataframe from the individual ones
training_set.dataframe <- do.call(rbind, training_set.data)
## Imports Test Set
setwd(test_set.location)
# Finds all the CSV files in that path with the suffix features.csv
test_set.files <- list.files(pattern="*features.csv")
# Goes through the list of files and imports the data into training_set.data
test_set.data <- list()
for (i in 1:length(test_set.files)) {
test_set.data[[i]] <- read.csv(test_set.files[i], header=FALSE, sep=",")
}
# Calls RBind on training_set.data and creates one dataframe from the individual ones
test_set.dataframe <- do.call(rbind, test_set.data)
View(test_set.data)
View(test_set.dataframe)
set.seed(3060)
# Sets the location variables and the working directory
training_set.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/training_dataset"
section_code.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/section2_code"
setwd(training_set.location)
# Finds all the CSV files in that path with the suffix features.csv
training_set.files <- list.files(pattern="*features.csv")
# Goes through the list of files and imports the data into training_set.data
training_set.data <- list()
for (i in 1:length(training_set.files)) {
training_set.data[[i]] <- read.csv(training_set.files[i], header=FALSE, sep=",")
}
# Calls RBind on training_set.data and creates one dataframe from the individual ones
training_set.dataframe <- do.call(rbind, training_set.data)
model <- glm(V1 ~ V3 + V4 + V5,family=binomial(link='logit'),data=training_set.dataframe)
?glm
# Imports the classes needed for classification and plotting
library(tree)
training_set.tree <- tree(as.factor(V1)~., training_set.dataframe)
plot(training_set.tree)
text(training_set.tree, pretty =0)
training_set.train = sample(1: nrow(training_set.dataframe), 200)
training_set.test = training_set.dataframe[-training_set.train,]
training_set.tree = tree(as.factor(V1)~.,training_set.dataframe, subset = training_set.train)
training_set.pred = predict(training_set.tree, training_set.test, type = "class")
training_set.test.labels <- training_set.dataframe$V1[-training_set.train]
mean(training_set.pred == training_set.test.labels)
training_set.tree.cv = cv.tree(training_set.tree, FUN = prune.misclass)
plot(training_set.tree.cv)
text(training_set.tree.cv, pretty =0)
?glm
set.seed(3060)
# Sets the location variables and the working directory
training_set.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/training_dataset"
test_set.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/test_dataset"
section_code.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/section4_code"
## Imports Traing Set
setwd(training_set.location)
# Finds all the CSV files in that path with the suffix features.csv
training_set.files <- list.files(pattern="*features.csv")
# Goes through the list of files and imports the data into training_set.data
training_set.data <- list()
for (i in 1:length(training_set.files)) {
training_set.data[[i]] <- read.csv(training_set.files[i], header=FALSE, sep=",")
}
# Calls RBind on training_set.data and creates one dataframe from the individual ones
training_set.dataframe <- do.call(rbind, training_set.data)
## Imports Test Set
setwd(test_set.location)
# Finds all the CSV files in that path with the suffix features.csv
test_set.files <- list.files(pattern="*features.csv")
# Goes through the list of files and imports the data into training_set.data
test_set.data <- list()
for (i in 1:length(test_set.files)) {
test_set.data[[i]] <- read.csv(test_set.files[i], header=FALSE, sep=",")
}
# Calls RBind on training_set.data and creates one dataframe from the individual ones
test_set.dataframe <- do.call(rbind, test_set.data)
# Gets the values of the rows of all the rows selected above for the training set
training_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12)[training_set,]
# Stores the rows not selected for the training set in the test set
# test_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12)[!training_set,]
test_set.x <- cbind(test_set.dataframe$V3,test_set.dataframe$V4,test_set.dataframe$V5,test_set.dataframe$V6,test_set.dataframe$V7,test_set.dataframe$V8,test_set.dataframe$V9,test_set.dataframe$V10,test_set.dataframe$V11,test_set.dataframe$V12)[test_set,]
# Gets the labels for the test and training sets
training_set.labels <- training_set.dataframe$V1[training_set]
test_set.index <- training_set.dataframe$V2[test_set]
knn.pred <- knn(training_set.x,test_set.x,training_set.labels,k=7)
predictions <- cbind(knn.pred,test_set.index)
## Now to perform the statistical analysis
library(class)
# Gets the values of the rows of all the rows selected above for the training set
training_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12)[training_set,]
# Stores the rows not selected for the training set in the test set
# test_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12)[!training_set,]
test_set.x <- cbind(test_set.dataframe$V3,test_set.dataframe$V4,test_set.dataframe$V5,test_set.dataframe$V6,test_set.dataframe$V7,test_set.dataframe$V8,test_set.dataframe$V9,test_set.dataframe$V10,test_set.dataframe$V11,test_set.dataframe$V12)[test_set,]
# Gets the labels for the test and training sets
training_set.labels <- training_set.dataframe$V1[training_set]
test_set.index <- training_set.dataframe$V2[test_set]
## Now to perform the statistical analysis
library(class)
# Gets the values of the rows of all the rows selected above for the training set
training_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12)
# Stores the rows not selected for the training set in the test set
# test_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12)[!training_set,]
test_set.x <- cbind(test_set.dataframe$V3,test_set.dataframe$V4,test_set.dataframe$V5,test_set.dataframe$V6,test_set.dataframe$V7,test_set.dataframe$V8,test_set.dataframe$V9,test_set.dataframe$V10,test_set.dataframe$V11,test_set.dataframe$V12)
View(test_set.x)
# Gets the labels for the test and training sets
training_set.labels <- training_set.dataframe$V1
test_set.index <- training_set.dataframe$V2
View(training_set.tree)
knn.pred <- knn(training_set.x,test_set.x,training_set.labels,k=7)
predictions <- cbind(knn.pred,test_set.index)
View(predictions)
# Gets the values of the rows of all the rows selected above for the training set
training_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12)
# Stores the rows not selected for the training set in the test set
# test_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12)[!training_set,]
test_set.x <- cbind(test_set.dataframe$V3,test_set.dataframe$V4,test_set.dataframe$V5,test_set.dataframe$V6,test_set.dataframe$V7,test_set.dataframe$V8,test_set.dataframe$V9,test_set.dataframe$V10,test_set.dataframe$V11,test_set.dataframe$V12)
# Gets the labels for the test and training sets
training_set.labels <- training_set.dataframe$V1
test_set.index <- test_set.dataframe$V2
knn.pred <- knn(training_set.x,test_set.x,training_set.labels,k=7)
predictions <- cbind(knn.pred,test_set.index)
View(predictions)
View(training_set.dataframe)
View(training_set.test)
summary(predictions)
training_set.classifier <- cforest(V1~., data = training_set.dataframe, control=cforest_unbiased(mtry=2,ntree=50))
library(Boruta)
installed.packages("Boruta")
library(Boruta)
install.packages()
library(Boruta)
library(Boruta)
training_set.classifier <- Boruta(V1~., data=na.omit(training_set.dataframe), doTrace=2)
print(training_set.classifier)
training_set.selected <- names(training_set.classifier$finalDecision[training_set.classifier$finalDecision %in% c("Confirmed", "Tentative")])
print(training_set.selected)
training_set.selected <- names(training_set.classifier$finalDecision[training_set.classifier$finalDecision %in% c("Confirmed")])
print(training_set.selected)
# Gets the values of the rows of all the rows selected above for the training set
training_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12,training_set.dataframe$V13,training_set.dataframe$V14,training_set.dataframe$V15,training_set.dataframe$V16,training_set.dataframe$V17,training_set.dataframe$V18,training_set.dataframe$V19)
# Stores the rows not selected for the training set in the test set
# test_set.x <- cbind(training_set.dataframe$V3,training_set.dataframe$V4,training_set.dataframe$V5,training_set.dataframe$V6,training_set.dataframe$V7,training_set.dataframe$V8,training_set.dataframe$V9,training_set.dataframe$V10,training_set.dataframe$V11,training_set.dataframe$V12)[!training_set,]
test_set.x <- cbind(test_set.dataframe$V3,test_set.dataframe$V4,test_set.dataframe$V5,test_set.dataframe$V6,test_set.dataframe$V7,test_set.dataframe$V8,test_set.dataframe$V9,test_set.dataframe$V10,test_set.dataframe$V11,test_set.dataframe$V12,test_set.dataframe$V13,test_set.dataframe$V14,test_set.dataframe$V15,test_set.dataframe$V16,test_set.dataframe$V17,test_set.dataframe$V18,test_set.dataframe$V19)
# Gets the labels for the test and training sets
training_set.labels <- training_set.dataframe$V1
test_set.index <- test_set.dataframe$V2
knn.pred <- knn(training_set.x,test_set.x,training_set.labels,k=7)
predictions <- cbind(knn.pred,test_set.index)
View(predictions)
summary(predictions)
summary(training_set.labels)
# Gets the labels for the test and training sets
training_set.labels <- as.factor(training_set.dataframe$V1)
test_set.index <- test_set.dataframe$V2
knn.pred <- knn(training_set.x,test_set.x,training_set.labels,k=7)
predictions <- cbind(knn.pred,test_set.index)
summary(predictions)
# Gets the labels for the test and training sets
training_set.labels <- as.character(training_set.dataframe$V1)
test_set.index <- test_set.dataframe$V2
knn.pred <- knn(training_set.x,test_set.x,training_set.labels,k=7)
predictions <- cbind(knn.pred,test_set.index)
View(predictions)
?knn
knn.pred <- knn(training_set.x,test_set.x,training_set.labels,k=7)
attributes(.Last.value)
view(.Last.value)
knn.pred <- knn(training_set.x,test_set.x,training_set.labels,k=7)
predictions <- cbind(knn.pred,test_set.index)
for (i in 1:length(predictions)) {
predictions$knn.pred <- knn.pred$levels[predictions$knn.pred]
}
predictions$knn.pred[i] <- knn.pred$levels[predictions$knn.pred[i]]
for (i in 1:length(predictions)) {
predictions$knn.pred[i] <- knn.pred$levels[predictions$knn.pred[i]]
}
is.atomic(predictions)
predictions <- as.dataframe(cbind(knn.pred,test_set.index))
predictions <- dataframe(cbind(knn.pred,test_set.index))
predictions <- do.call(rbind, cbind(knn.pred,test_set.index))
predictions <- data.frame(cbind(knn.pred,test_set.index))
for (i in 1:length(predictions)) {
predictions$knn.pred[i] <- knn.pred$levels[predictions$knn.pred[i]]
}
is.atomic
is.atomic(knn.pred)
data.frame(knn.pred)
data.frame(knn.pred)
knn.df <- data.frame(knn.pred)
View(knn.df)
predictions <- data.frame(cbind(test_set.index, knn.df))
View(predictions)
setwd(output_file.location)
output_file.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342"
write.csv(predictions, "40145342_section4_predictions.csv", sep=",",  col.names=FALSE)
write.table(predictions, "40145342_section4_predictions.csv", sep=",",  col.names=FALSE)
setwd(output_file.location)
write.table(predictions, "40145342_section4_predictions.csv", sep=",",  col.names=FALSE)
# Finds all the CSV files in that path with the suffix features.csv
test_set.files <- list.files(pattern="*features.csv")
write.table(predictions, "40145342_section4_predictions.csv", sep = ",",  col.names = FALSE, row.names = FALSE)
summary(predictions)
summary(knn.df
)
predictions <- data.frame(cbind(test_set.index, format(knn.df, digits = 4)))
setwd(output_file.location)
write.table(predictions, "40145342_section4_predictions.csv", sep = ",",  col.names = FALSE, row.names = FALSE)
knn.df <- data.frame(knn.pred)
formatC(knn.df, width = 4, format = "d", flag = "0")
formatC(as.integer(knn.df), width = 4, format = "d", flag = "0")
formatC(as.numeric(knn.df), width = 4, format = "d", flag = "0")
formatC(test_set.index, width = 4, format = "d", flag = "0")
predictions <- data.frame(cbind(test_set.index, knn.df))
setwd(output_file.location)
write.table(predictions, "40145342_section4_predictions.csv", sep = ",",  col.names = FALSE, row.names = FALSE)
test_set.index <- formatC(test_set.index, width = 4, format = "d", flag = "0")
predictions <- data.frame(cbind(test_set.index, knn.df))
setwd(output_file.location)
write.table(predictions, "40145342_section4_predictions.csv", sep = ",",  col.names = FALSE, row.names = FALSE)
?randomforrest
