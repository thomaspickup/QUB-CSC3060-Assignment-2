# Imports the classes needed for classification and plotting
library(tree)
set.seed(3060)
# Sets the location variables and the working directory
training_set.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/training_dataset"
section_code.location <- "/Users/thomaspickup/Documents/University/CSC3060/Assignments/Assignment2_40145342/section2_code"
setwd(training_set.location)
# Finds all the CSV files in that path with the suffix features.csv
training_set.files <- list.files(pattern="*features.csv")
# Goes through the list of files and imports the data into training_set.data
training_set.data <- list()
for (i in 1:length(training_set.files)) {
training_set.data[[i]] <- read.csv(training_set.files[i], header=FALSE, sep=",")
}
# Calls RBind on training_set.data and creates one dataframe from the individual ones
training_set.dataframe <- do.call(rbind, training_set.data)
# Imports the classes needed for classification and plotting
library(tree)
?tree
my_tree <- tree(V1 ~., training_set.dataframe)
my_tree
?plot
plot(my_tree)
text(my_tree , pretty =0)
?bagging
install.packages("bagging")
training_set.tree <- tree(V1 ~., training_set.dataframe)
plot(training_set.tree)
text(training_set.tree, pretty =0)
View(training_set.data)
training_set.tree <- tree(V1 ~., training_set.dataframe)
plot(training_set.tree)
text(training_set.tree, pretty =0)
training_set.train = sample(1: nrow(training_set.dataframe), 200)
training_set.test = training_set.dataframe[!training_set.train,]
training_set.tree = tree(V1 ~.,training_set.dataframe, subset = training_set.train)
training_set.pred = predict(training_set.tree , training_set.test , type ="class")
training_set.test.labels <- training_set.dataframe$V1[!training_set.train]
table(training_set.pred, training_set.test.labels)
training_set.tree <- tree(as.factor(V1)~., training_set.dataframe)
plot(training_set.tree)
text(training_set.tree, pretty =0)
training_set.train = sample(1: nrow(training_set.dataframe), 200)
training_set.test = training_set.dataframe[!training_set.train,]
training_set.tree = tree(as.factor(V1)~.,training_set.dataframe, subset = training_set.train)
training_set.pred = predict(training_set.tree , training_set.test , type ="class")
?predict
=
training_set.pred = predict(training_set.tree, training_set.test , type ="class")
training_set.test = training_set.dataframe[-training_set.train,]
training_set.train = sample(1: nrow(training_set.dataframe), 200)
training_set.test = training_set.dataframe[-training_set.train,]
training_set.tree = tree(as.factor(V1)~.,training_set.dataframe, subset = training_set.train)
training_set.pred = predict(training_set.tree, training_set.test, type = "class")
training_set.test.labels <- training_set.dataframe$V1[!training_set.train]
table(training_set.pred, training_set.test.labels)
mean(training_set.pred == training_set.test.labels)
training_set.test.labels <- training_set.dataframe$V1[!training_set.test]
mean(training_set.pred == training_set.test.labels)
training_set.test.labels <- training_set.dataframe$V1[-training_set.test]
training_set.test.labels <- training_set.dataframe$V1[-as.data.frame(training_set.test)]
training_set.test.labels <- training_set.dataframe$V1[!as.data.frame(training_set.test)]
training_set.test.labels <- training_set.dataframe$V1[as.data.frame(training_set.test]
training_set.test.labels <- training_set.dataframe$V1[as.data.frame(training_set.test)]
training_set.test.labels <- training_set.dataframe$V1[training_set.test]
training_set.test.labels <- training_set.dataframe$V1[training_set.test,]
training_set.test.labels <- training_set.dataframe$V1[as.list(training_set.test)]
training_set.test.labels <- training_set.dataframe$V1
table(training_set.pred, training_set.test.labels)
training_set.test.labels <- training_set.dataframe$V1[!training_set.train]
training_set.test.labels <- training_set.dataframe$V1[-training_set.train]
table(training_set.pred, training_set.test.labels)
mean(training_set.pred == training_set.test.labels)
c
training_set.tree.cv =cv.tree(training_set.tree, FUN=prune.misclass )
training_set.tree.cv = cv.tree(training_set.tree, FUN = prune.misclass)
min_class_error_rate = training_set.tree.cv$dev[which.min(training_set.tree.cv$dev)]
final_terminal_nodes = training_set.tree.cv$size[ which.min(training_set.tree.cv$dev)]
par(mfrow = c(1, 2))
plot(training_set.tree.cv$size, training_set.tree.cv$dev, type = "b")
plot(training_set.tree.cv$k, training_set.tree.cv$dev, type = "b")
prune.carseats = prune.misclass(tree.carseats ,best =9)
prune.carseats = prune.misclass(training_set.tree ,best =9)
plot( prune.carseats )
text(prune.carseats , pretty =0)
.
.
plot(training_set.tree)
text(training_set.tree, pretty =0)
training_set.tree.cv = cv.tree(training_set.tree, FUN = prune.misclass)
plot(training_set.tree.cv)
text(training_set.tree.cv, pretty =0)
model <- glm(as.factor(V1)~.,family=binomial(link='logit'),data=training_set.dataframe)
View(model)
?glm
model <- glm(V3 + V4.,family=binomial(link='logit'),data=training_set.dataframe)
model <- glm(V3 ~ V4.,family=binomial(link='logit'),data=training_set.dataframe)
model <- glm(V3 ~. V4 ~.,family=binomial(link='logit'),data=training_set.dataframe)
model <- glm(V3 ~ + V4 ~.,family=binomial(link='logit'),data=training_set.dataframe)
model <- glm(V1 ~ V3 + V4 + V5,family=binomial(link='logit'),data=training_set.dataframe)
View(training_set.data)
View(prune.carseats)
